#!/usr/bin/env node

"use strict"
const fs = require('fs')

function usage() {
    console.log(`usage: ${process.argv[1]} [*mythril-api-json-path*] [*timeout-secs*]

Run  MythOS analyses on *mythril-api-json-path*

Set environment MYTHRIL_PASSWORD and MYTHRIL_ETH_ADDRESS before using.
`)
    process.exit(1)
}

require('./helper')

const argLen = process.argv.length
if (argLen === 3 &&
    process.argv[2].match(/^[-]{0,2}h(?:elp)?$/)) {
    usage()
}

let timeout = 20
if (argLen >= 3 &&
    process.argv[argLen-1].match(/^\d+$/)) {
    timeout = parseInt(process.argv[argLen-1])
}


const jsonPath = process.argv[2] || `${__dirname}/sample-json/PublicArray.json`

/**********************************
  Example code starts here ...
***********************************/

let armletOptions = {
    // ethAddress: process.env.MYTHRIL_ETH_ADDRESS,
    password: process.env.MYTHRIL_PASSWORD,
    platforms: []  // client chargeback
}

if (process.env.MYTHRIL_ETH_ADDRESS) {
    armletOptions.ethAddress = process.env.MYTHRIL_ETH_ADDRESS
} else if (process.env.EMAIL) {
    armletOptions.email = process.env.EMAIL
}

const armlet = require('../index') // if not installed
// const armlet = require('armlet') // if installed

const client = new armlet.Client(armletOptions)

const analyzeOptions = {
    data: JSON.parse(fs.readFileSync(jsonPath, 'utf8')),
    timeout: timeout * 1000  // convert secs to millisecs
}

client.analyze(analyzeOptions)
    .then(issues => {
        console.log(issues)
    }).catch(err => {
        console.log(err)
    })
