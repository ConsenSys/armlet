#!/usr/bin/env node

"use strict"
const fs = require('fs')

function usage() {
    console.log(`usage: ${process.argv[1]} [*mythx-api-json-path*] [*timeout-secs*]

Run MythX analyses on *mythx-api-json-path*

Set environment MYTHX_PASSWORD and MYTHX_ETH_ADDRESS

if you have have registered to reduce request rate-limiting.
`)
    process.exit(1)
}

/**********************************
  Minimal option processing
***********************************/

const argLen = process.argv.length
if (argLen === 3 &&
    process.argv[2].match(/^[-]{0,2}h(?:elp)?$/)) {
    usage()
}

// 2 minute is a reasonable minimum timeout; For a "quick" analysis
// the backend uses a value of 90 seconds and there is some
// queueing overhead
let timeout = 120

if (argLen >= 3 &&
    process.argv[argLen-1].match(/^\d+$/)) {
    timeout = parseInt(process.argv[argLen-1])
}


const jsonPath = process.argv[2] || `${__dirname}/sample-json/TokenBankChallenge.json`

/**********************************
  Authentication and option setup
***********************************/

let armletOptions = {
    ethAddress: process.env.MYTHX_ETH_ADDRESS,
    password: process.env.MYTHX_PASSWORD,
}

armletOptions.ethAddress = process.env.MYTHX_ETH_ADDRESS

/**********************************
  Example code starts here ...
***********************************/

const armlet = require('../index') // if not installed
// const armlet = require('armlet') // if installed

const client = new armlet.Client(armletOptions)

const analyzeOptions = {
    // Setting client tool tracking so we can get stastics on tool use
    clientToolName: 'armlet-example',

    // If you want debug output, uncomment the below
    // debug: true,

    data: JSON.parse(fs.readFileSync(jsonPath, 'utf8')),

    // How long to wait initially before polling for results
    initialDelay: 50 * 1000,

    // The maximum time allowed before returning
    timeout: timeout * 1000,
}

client.analyzeWithStatus(analyzeOptions)
    .then(result => {
        const util = require('util')
        console.log(`${util.inspect(result, {depth: null})}`)
    }).catch(err => {
        console.log(err)
    })
